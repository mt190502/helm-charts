---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Release.Name }}-main"
  namespace: "{{ if eq .Release.Namespace "default" }}keycloak-k8s{{ else }}{{ .Release.Namespace }}{{ end }}"
spec:
  replicas: {{ .Values.replicaCount | default (printf "%d" 1) }}
  selector:
    matchLabels:
      app: "{{ .Release.Name }}-main"
  template:
    metadata:
      labels:
        app: "{{ .Release.Name }}-main"
    spec:
    {{- with .Values.nodeSelector }}
      nodeSelector:
      {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
      {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
      {{- toYaml . | nindent 8 }}
    {{- end }}
      initContainers:
        - name: "{{ .Release.Name }}-main-init"
          image: busybox
          command:
            - sh
            - -c
            - |
              {{- if and .Values.postgresql.cnpg.enabled }}
              until nc -z -v -w30 {{ .Release.Name }}-postgresql-rw 5432
              {{- else if and .Values.postgresql.internal.enabled }}
              until nc -z -v -w30 {{ .Release.Name }}-postgresql 5432
              {{- else }}
              until nc -z -v -w30 {{ .Values.postgresql.external.host }} {{ .Values.postgresql.external.port }}
              {{- end }}
              do
                echo "Waiting for the database to be ready..."
                sleep 5
              done
      containers:
        - name: "{{ .Release.Name }}-main"
          image: {{ template "keycloak.main.image" . }}
          command: 
            - sh
            - -c 
            - |
              /opt/keycloak/bin/kc.sh build
              /opt/keycloak/bin/kc.sh start {{ if .Values.main.extraArgs }}{{ .Values.main.extraArgs }}{{ end }}
          env:
            - name: KC_DB_USERNAME
              {{- if .Values.postgresql.secret.enabled }}
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.postgresql.secret.name }}{{ .Values.postgresql.secret.name }}{{ else }}{{ .Release.Name }}-postgresql{{ end }}
                  key: {{ .Values.postgresql.secret.usernameKey | quote }}
              {{- else }}
              value: {{ .Values.postgresql.options.username | quote }}
              {{- end }}
            - name: KC_DB_PASSWORD
              {{- if .Values.postgresql.secret.enabled }}
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.postgresql.secret.name }}{{ .Values.postgresql.secret.name }}{{ else }}{{ .Release.Name }}-postgresql{{ end }}
                  key: {{ .Values.postgresql.secret.passwordKey | quote }}
              {{- else }}
              value: {{ .Values.postgresql.options.password | quote }}
              {{- end }}
            - name: DB_DATABASE
              {{- if and .Values.postgresql.secret.enabled }}
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.postgresql.secret.name }}{{ .Values.postgresql.secret.name }}{{ else }}{{ .Release.Name }}-postgresql{{ end }}
                  key: {{ .Values.postgresql.secret.databaseKey | quote }}
              {{- else }}
              value: {{ .Values.postgresql.options.database | quote }}
              {{- end }}
            - name: KEYCLOAK_ADMIN
              {{- if .Values.main.secret.enabled }}
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.main.secret.name }}{{ .Values.main.secret.name }}{{ else }}{{ .Release.Name }}-secret{{ end }}
                  key: {{ .Values.main.secret.usernameKey | quote }}
              {{- else }}
              value: {{ .Values.main.secret.values.username | quote }}
              {{- end }}
            - name: KEYCLOAK_ADMIN_PASSWORD
              {{- if .Values.main.secret.enabled }}
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.main.secret.name }}{{ .Values.main.secret.name }}{{ else }}{{ .Release.Name }}-secret{{ end }}
                  key: {{ .Values.main.secret.passwordKey | quote }}
              {{- else }}
              value: {{ .Values.main.secret.values.password | quote }}
              {{- end }}
            - name: DB_HOST
              {{- if .Values.postgresql.internal.enabled }}
              value: {{ .Release.Name }}-postgresql{{ if .Values.postgresql.cnpg.enabled }}-rw{{ end }}
              {{- else }}
              value: {{ .Values.postgresql.external.host }}
              {{- end }}
            - name: DB_PORT
              {{- if .Values.postgresql.internal.enabled }}
              value: "5432"
              {{- else }}
              value: {{ .Values.postgresql.external.port | quote }}
              {{- end }}
            - name: KC_DB_URL
              value: {{ template "postgresql.credentials" . }}
            - name: KC_DB
              value: "postgres"
            - name: KC_HOSTNAME
              value: {{ .Values.main.options.kc_hostname | quote }}
            - name: KC_HOSTNAME_PORT
              value: {{ index .Values.main.ports 0 "containerPort" | quote }}
            - name: KC_HOSTNAME_STRICT_BACKCHANNEL
              value: {{ .Values.main.options.kc_hostname_strict_backchannel | quote }}
            - name: KC_HTTP_ENABLED
              value: {{ .Values.main.options.kc_http_enabled | quote }}
            - name: KC_HOSTNAME_STRICT_HTTPS
              value: {{ .Values.main.options.kc_hostname_strict_https | quote }}
            - name: KC_HEALTH_ENABLED
              value: {{ .Values.main.options.kc_health_enabled | quote }}
          {{- range .Values.main.environments }}
            - name: {{ .name }}
              value: {{ .value | quote }}
          {{- end }}
          {{- with .Values.main.ports }}
          ports:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.resources.limits.main }}
          resources:
            limits:
              {{- toYaml . | nindent 14 }}
          {{- end }}
          volumeMounts:
            - name: "{{ .Release.Name }}-data"
              mountPath: /opt/keycloak/providers
              subPath: providers
            - name: "{{ .Release.Name }}-data"
              mountPath: /opt/keycloak/themes
              subPath: themes
      volumes:
        - name: "{{ .Release.Name }}-data"
          persistentVolumeClaim:
            claimName: "{{ .Release.Name }}-data-pvc"

{{ if and .Values.postgresql.internal.enabled (eq .Values.postgresql.cnpg.enabled false) }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "{{ .Release.Name }}-postgresql"
  namespace: "{{ if eq .Release.Namespace "default" }}keycloak-k8s{{ else }}{{ .Release.Namespace }}{{ end }}"
spec:
  replicas: {{ .Values.replicaCount | default (printf "%d" 1) }}
  podManagementPolicy: {{ .Values.postgresql.settings.podManagementPolicy | default "Parallel" | quote }}
  serviceName: "{{ .Release.Name }}-postgresql"
  {{- if .Values.postgresql.settings.updateStrategy }}
  updateStrategy:
    type: {{ .Values.postgresql.settings.updateStrategy.type | default "RollingUpdate" | quote }}
  {{- end }}
  selector:
    matchLabels:
      app: "{{ .Release.Name }}-postgresql"
  template:
    metadata:
      labels:
        app: "{{ .Release.Name }}-postgresql"
    spec:
    {{- with .Values.nodeSelector }}
      nodeSelector:
      {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
      {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
      {{- toYaml . | nindent 8 }}
    {{- end }}
      initContainers:
        - name: "{{ .Release.Name }}-postgresql-init"
          image: busybox
          command:
            - sh
            - -c
            - |
              [ -d "/mnt/lost+found" ] && rm -rf /mnt/lost+found
              exit 0
          volumeMounts:
            - name: "database"
              mountPath: /mnt
      containers:
        - name: "{{ .Release.Name }}-postgresql"
          image: {{ template "keycloak.postgresql.image" . }}
          env:
            - name: POSTGRES_DB
              {{- if .Values.postgresql.secret.enabled }}
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.postgresql.secret.name }}{{ .Values.postgresql.secret.name }}{{ else }}{{ .Release.Name }}-postgresql{{ end }}
                  key: {{ .Values.postgresql.secret.databaseKey | quote }}
              {{- else }}
              value: {{ .Values.postgresql.options.database | quote }}
              {{- end }}
            - name: POSTGRES_USER
              {{- if .Values.postgresql.secret.enabled }}
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.postgresql.secret.name }}{{ .Values.postgresql.secret.name }}{{ else }}{{ .Release.Name }}-postgresql{{ end }}
                  key: {{ .Values.postgresql.secret.usernameKey | quote }}
              {{- else }}
              value: {{ .Values.postgresql.options.username | quote }}
              {{- end }}
            - name: POSTGRES_PASSWORD
              {{- if .Values.postgresql.secret.enabled }}
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.postgresql.secret.name }}{{ .Values.postgresql.secret.name }}{{ else }}{{ .Release.Name }}-postgresql{{ end }}
                  key: {{ .Values.postgresql.secret.passwordKey | quote }}
              {{- else }}
              value: {{ .Values.postgresql.options.password | quote }}
              {{- end }}
          {{- range .Values.postgresql.environments }}
            - name: {{ .name }}
              value: {{ .value | quote }}
          {{- end }}
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: "database"
              mountPath: /var/lib/postgresql/data
      volumes:
        - name: "database"
  {{- if .Values.postgresql.settings.persistence.claimRetentionPolicy }}
  persistentVolumeClaimRetentionPolicy:
    whenDeleted: {{ .Values.postgresql.settings.persistence.claimRetentionPolicy.whenDeleted | default "Retain" | quote }}
    whenScaled: {{ .Values.postgresql.settings.persistence.claimRetentionPolicy.whenScaled | default "Retain" | quote }}
  {{- end }}
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: "database"
        namespace: "{{ if eq .Release.Namespace "default" }}keycloak-k8s{{ else }}{{ .Release.Namespace }}{{ end }}"
      spec:
        accessModes:
        {{- if .Values.postgresql.settings.persistence.accessModes }}
          {{- toYaml .Values.postgresql.settings.persistence.accessModes | nindent 8 }} 
        {{- else }}
          - ReadWriteOnce
        {{- end }}
        resources:
          requests:
            storage: "{{ .Values.resources.requests.postgresql.storage }}"
{{- end }}