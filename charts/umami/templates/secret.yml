{{- if and .Values.global.postgres.secret.enabled .Values.global.postgres.secret.autoCreate }}
---
apiVersion: v1
kind: Secret
metadata:
  name: "{{ .Release.Name }}-postgres"
  namespace: "{{ if eq .Release.Namespace "default" }}umami-k8s{{ else }}{{ .Release.Namespace }}{{ end }}"
type: Opaque
data:
  {{- $credentials := split " " (include "postgres.credentials" (dict "Release" .Release "Values" .Values "raw" true)) }}
  {{- $username := $credentials._0 }}
  {{- $password := $credentials._1 }}
  {{- $database := $credentials._2 }}
  {{ .Values.global.postgres.secret.usernameKey }}: "{{ $username | b64enc }}"
  {{ .Values.global.postgres.secret.passwordKey }}: "{{ $password | b64enc }}"
  {{ .Values.global.postgres.secret.databaseKey }}: "{{ $database | b64enc }}"
{{- end }}

{{- if and .Values.global.mysql.secret.enabled .Values.global.mysql.secret.autoCreate }}
---
apiVersion: v1
kind: Secret
metadata:
  name: "{{ .Release.Name }}-mysql"
  namespace: "{{ if eq .Release.Namespace "default" }}umami-k8s{{ else }}{{ .Release.Namespace }}{{ end }}"
type: Opaque
data:
  {{- $credentials := split " " (include "mysql.credentials" (dict "Release" .Release "Values" .Values "raw" true)) }}
  {{- $username := $credentials._0 }}
  {{- $password := $credentials._1 }}
  {{- $database := $credentials._2 }}
  {{- $rootPassword := $credentials._3 }}
  {{ .Values.global.mysql.secret.usernameKey }}: "{{ $username | b64enc }}"
  {{ .Values.global.mysql.secret.passwordKey }}: "{{ $password | b64enc }}"
  {{ .Values.global.mysql.secret.databaseKey }}: "{{ $database | b64enc }}"
  {{ .Values.global.mysql.secret.rootPasswordKey }}: "{{ $rootPassword | b64enc }}"
{{- end }}