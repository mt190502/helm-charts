---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Release.Name }}-main"
  namespace: "{{ if eq .Release.Namespace "default" }}paperless-ngx-k8s{{ else }}{{ .Release.Namespace }}{{ end }}"
spec:
  replicas: {{ .Values.replicaCount | default (printf "%d" 1) }}
  selector:
    matchLabels:
      app: "{{ .Release.Name }}-main"
  template:
    metadata:
      labels:
        app: "{{ .Release.Name }}-main"
    spec:
    {{- with .Values.nodeSelector }}
      nodeSelector:
      {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
      {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
      {{- toYaml . | nindent 8 }}
    {{- end }}
      initContainers:
        - name: "{{ .Release.Name }}-main-init"
          image: busybox
          command:
            - sh
            - -c
            - |
              {{- if and .Values.postgresql.cnpg.enabled }}
              until nc -z -v -w30 {{ .Release.Name }}-postgresql-rw 5432
              {{- else if and .Values.postgresql.internal.enabled }}
              until nc -z -v -w30 {{ .Release.Name }}-postgresql 5432
              {{- else if .Values.postgresql.external.enabled }}
              until nc -z -v -w30 {{ .Values.postgresql.external.host }} {{ .Values.postgresql.external.port }}
              {{- end }}
              do
                echo "Waiting for the postgresql to be ready..."
                sleep 5
              done
              {{- if and .Values.redis.enabled }}
                {{- if .Values.redis.internal.enabled }}
              until nc -z -v -w30 {{ .Release.Name }}-redis 6379
                {{- else if and .Values.redis.external.enabled }}
              until nc -z -v -w30 {{ .Values.redis.external.host }} {{ .Values.redis.external.port }}
                {{- end }}
              do
                echo "Waiting for the redis to be ready..."
                sleep 5
              done
              {{- end }}
      containers:
        - name: "{{ .Release.Name }}-main"
          image: {{ template "paperless-ngx.main.image" . }}
          env:
            - name: PAPERLESS_REDIS
              value: {{ template "redis.url" . }}
            - name: PAPERLESS_DBENGINE
              value: "postgresql"
            - name: PAPERLESS_DBHOST
              {{- if .Values.postgresql.internal.enabled }}
              value: {{ .Release.Name }}-postgresql{{ if and .Values.postgresql.cnpg.enabled }}-rw{{ end }}
              {{- else }}
              value: {{ printf "%s:%.0f" .Values.postgresql.external.host .Values.postgresql.external.port | quote }}
              {{- end }}
            - name: PAPERLESS_DBUSER
              {{- if .Values.postgresql.secret.enabled }}
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.postgresql.secret.name }}{{ .Values.postgresql.secret.name }}{{ else }}{{ .Release.Name }}-postgresql{{ end }}
                  key: {{ .Values.postgresql.secret.usernameKey | quote }}
              {{- else }}
              value: {{ .Values.postgresql.options.username | quote }}
              {{- end }}
            - name: PAPERLESS_DBPASS
              {{- if .Values.postgresql.secret.enabled }}
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.postgresql.secret.name }}{{ .Values.postgresql.secret.name }}{{ else }}{{ .Release.Name }}-postgresql{{ end }}
                  key: {{ .Values.postgresql.secret.passwordKey | quote }}
              {{- else }}
              value: {{ .Values.postgresql.options.password | quote }}
              {{- end }}
            - name: PAPERLESS_DBNAME
              {{- if and .Values.postgresql.secret.enabled }}
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.postgresql.secret.name }}{{ .Values.postgresql.secret.name }}{{ else }}{{ .Release.Name }}-postgresql{{ end }}
                  key: {{ .Values.postgresql.secret.databaseKey | quote }}
              {{- else }}
              value: {{ .Values.postgresql.options.database | quote }}
              {{- end }}
            - name: PAPERLESS_PORT
              value: {{ .Values.main.options.paperless_port | quote }}
            - name: PAPERLESS_URL
              value: {{ .Values.main.options.paperless_url | quote }}
            - name: PAPERLESS_SECRET_KEY
             {{- if .Values.main.appSecret.enabled }}
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.main.appSecret.name }}{{ .Values.main.appSecret.name }}{{ else }}{{ .Release.Name }}-main{{ end }}
                  key: {{ .Values.main.appSecret.key | quote }}
             {{- else }}
              value: {{ .Values.main.options.paperless_app_secret | quote }}
             {{- end }}
            - name: USERMAP_UID
              value: {{ .Values.main.options.usermap_uid | quote }}
            - name: USERMAP_GID
              value: {{ .Values.main.options.usermap_gid | quote }}
          {{- range .Values.main.environments }}
            - name: {{ .name }}
              value: {{ .value | quote }}
          {{- end }}
          {{- with .Values.main.ports }}
          ports:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.resources.limits.main }}
          resources:
            limits:
              {{- toYaml . | nindent 14 }}
          {{- end }}
          volumeMounts:
            - name: "{{ .Release.Name }}-data"
              mountPath: /usr/src/paperless/data
              subPath: data
            - name: "{{ .Release.Name }}-data"
              mountPath: /usr/src/paperless/media
              subPath: media
            - name: "{{ .Release.Name }}-data"
              mountPath: /usr/src/paperless/export
              subPath: export
      volumes:
        - name: "{{ .Release.Name }}-data"
          persistentVolumeClaim:
            claimName: "{{ .Release.Name }}-data-pvc"

{{ if and .Values.redis.internal.enabled .Values.redis.enabled }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "{{ .Release.Name }}-redis"
  namespace: "{{ if eq .Release.Namespace "default" }}paperless-ngx-k8s{{ else }}{{ .Release.Namespace }}{{ end }}"
spec:
  replicas: {{ .Values.replicaCount | default (printf "%d" 1) }}
  podManagementPolicy: {{ .Values.redis.settings.podManagementPolicy | default "Parallel" | quote }}
  serviceName: "{{ .Release.Name }}-redis"
  {{- if .Values.redis.settings.updateStrategy }}
  updateStrategy:
    type: {{ .Values.redis.settings.updateStrategy.type | default "RollingUpdate" | quote }}
  {{- end }}
  selector:
    matchLabels:
      app: "{{ .Release.Name }}-redis"
  template:
    metadata:
      labels:
        app: "{{ .Release.Name }}-redis"
    spec:
    {{- with .Values.nodeSelector }}
      nodeSelector:
      {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
      {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
      {{- toYaml . | nindent 8 }}
    {{- end }}
      initContainers:
        - name: "{{ .Release.Name }}-redis-init"
          image: busybox
          command:
            - sh
            - -c
            - |
              [ -d "/mnt/lost+found" ] && rm -rf /mnt/lost+found
              exit 0
          volumeMounts:
            - name: "redis"
              mountPath: /mnt
      containers:
        - name: "{{ .Release.Name }}-redis"
          image: {{ template "paperless-ngx.redis.image" . }}
          ports:
            - containerPort: 6379
          {{- if .Values.redis.environments }}
          env:
          {{- range .Values.redis.environments }}
            - name: {{ .name }}
              value: {{ .value | quote }}
          {{- end }}
          {{- end }}
          volumeMounts:
            - name: "redis"
              mountPath: /data
      volumes:
        - name: "redis"
          persistentVolumeClaim:
            claimName: "redis"
  {{- if .Values.redis.settings.persistence.claimRetentionPolicy }}
  persistentVolumeClaimRetentionPolicy:
    whenDeleted: {{ .Values.redis.settings.persistence.claimRetentionPolicy.whenDeleted | default "Retain" | quote }}
    whenScaled: {{ .Values.redis.settings.persistence.claimRetentionPolicy.whenScaled | default "Retain" | quote }}
  {{- end }}
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: "redis"
        namespace: "{{ if eq .Release.Namespace "default" }}paperless-ngx-k8s{{ else }}{{ .Release.Namespace }}{{ end }}"
      spec:
        accessModes:
        {{- if .Values.redis.settings.persistence.accessModes }}
          {{- toYaml .Values.redis.settings.persistence.accessModes | nindent 8 }} 
        {{- else }}
          - ReadWriteOnce
        {{- end }}
        resources:
          requests:
            storage: "{{ .Values.resources.requests.redis.storage }}"
{{- end }}

{{ if and .Values.postgresql.internal.enabled (eq .Values.postgresql.cnpg.enabled false) }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "{{ .Release.Name }}-postgresql"
  namespace: "{{ if eq .Release.Namespace "default" }}paperless-ngx-k8s{{ else }}{{ .Release.Namespace }}{{ end }}"
spec:
  replicas: {{ .Values.replicaCount | default (printf "%d" 1) }}
  podManagementPolicy: {{ .Values.postgresql.settings.podManagementPolicy | default "Parallel" | quote }}
  serviceName: "{{ .Release.Name }}-postgresql"
  {{- if .Values.postgresql.settings.updateStrategy }}
  updateStrategy:
    type: {{ .Values.postgresql.settings.updateStrategy.type | default "RollingUpdate" | quote }}
  {{- end }}
  selector:
    matchLabels:
      app: "{{ .Release.Name }}-postgresql"
  template:
    metadata:
      labels:
        app: "{{ .Release.Name }}-postgresql"
    spec:
    {{- with .Values.nodeSelector }}
      nodeSelector:
      {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
      {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
      {{- toYaml . | nindent 8 }}
    {{- end }}
      initContainers:
        - name: "{{ .Release.Name }}-postgresql-init"
          image: busybox
          command:
            - sh
            - -c
            - |
              [ -d "/mnt/lost+found" ] && rm -rf /mnt/lost+found
              exit 0
          volumeMounts:
            - name: "database"
              mountPath: /mnt
      containers:
        - name: "{{ .Release.Name }}-postgresql"
          image: {{ template "paperless-ngx.postgresql.image" . }}
          env:
            - name: POSTGRES_DB
              {{- if .Values.postgresql.secret.enabled }}
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.postgresql.secret.name }}{{ .Values.postgresql.secret.name }}{{ else }}{{ .Release.Name }}-postgresql{{ end }}
                  key: {{ .Values.postgresql.secret.databaseKey | quote }}
              {{- else }}
              value: {{ .Values.postgresql.options.database | quote }}
              {{- end }}
            - name: POSTGRES_USER
              {{- if .Values.postgresql.secret.enabled }}
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.postgresql.secret.name }}{{ .Values.postgresql.secret.name }}{{ else }}{{ .Release.Name }}-postgresql{{ end }}
                  key: {{ .Values.postgresql.secret.usernameKey | quote }}
              {{- else }}
              value: {{ .Values.postgresql.options.username | quote }}
              {{- end }}
            - name: POSTGRES_PASSWORD
              {{- if .Values.postgresql.secret.enabled }}
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.postgresql.secret.name }}{{ .Values.postgresql.secret.name }}{{ else }}{{ .Release.Name }}-postgresql{{ end }}
                  key: {{ .Values.postgresql.secret.passwordKey | quote }}
              {{- else }}
              value: {{ .Values.postgresql.options.password | quote }}
              {{- end }}
          {{- range .Values.postgresql.environments }}
            - name: {{ .name }}
              value: {{ .value | quote }}
          {{- end }}
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: "database"
              mountPath: /var/lib/postgresql/data
      volumes:
        - name: "database"
  {{- if .Values.postgresql.settings.persistence.claimRetentionPolicy }}
  persistentVolumeClaimRetentionPolicy:
    whenDeleted: {{ .Values.postgresql.settings.persistence.claimRetentionPolicy.whenDeleted | default "Retain" | quote }}
    whenScaled: {{ .Values.postgresql.settings.persistence.claimRetentionPolicy.whenScaled | default "Retain" | quote }}
  {{- end }}
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: "database"
        namespace: "{{ if eq .Release.Namespace "default" }}paperless-ngx-k8s{{ else }}{{ .Release.Namespace }}{{ end }}"
      spec:
        accessModes:
        {{- if .Values.postgresql.settings.persistence.accessModes }}
          {{- toYaml .Values.postgresql.settings.persistence.accessModes | nindent 8 }} 
        {{- else }}
          - ReadWriteOnce
        {{- end }}
        resources:
          requests:
            storage: "{{ .Values.resources.requests.postgresql.storage }}"
{{- end }}