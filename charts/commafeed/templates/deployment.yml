apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Release.Name }}-web"
  namespace: "{{ if eq .Release.Namespace "default" }}commafeed-k8s{{ else }}{{ .Release.Namespace }}{{ end }}"
spec:
  replicas: {{ .Values.replicaCount | default (printf "%d" 1) }} 
  selector:
    matchLabels:
      app: "{{ .Release.Name }}-web"
  template:
    metadata:
      labels:
        app: "{{ .Release.Name }}-web"
    spec:
      {{- with .Values.nodeSelector }}
      nodeSelector:
        kubernetes.io/arch: amd64
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{-  with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: "{{ .Release.Name }}-web"
          image: {{ template "commafeed.web.image" . }}
          env:
            - name: QUARKUS_DATASOURCE_JDBC_URL
            {{- if .Values.global.postgres.secret.enabled }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-postgres
                  key: "conn_string"
            {{- else }}
              {{- $credentials := split " " (include "postgres.credentials" .) }}
              value: {{ printf "jdbc:postgresql://%s:%s/%s" $credentials._3 $credentials._4 $credentials._2 | quote }}
            {{- end }}
            - name: QUARKUS_DATASOURCE_USERNAME
            {{- if .Values.global.postgres.secret.enabled }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-postgres
                  key: {{ .Values.global.postgres.secret.usernameKey | quote }}
            {{- else }}
              value: {{ .Values.global.postgres.options.username | quote }}
            {{- end }}
            - name: QUARKUS_DATASOURCE_PASSWORD
            {{- if .Values.global.postgres.secret.enabled }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-postgres
                  key: {{ .Values.global.postgres.secret.passwordKey | quote }}
            {{- else }}
              value: {{ .Values.global.postgres.options.password | quote }}
            {{- end }}
            - name: CF_APP_PUBLICURL
              value: {{ .Values.global.web.options.publicUrl | quote }}
          {{- range .Values.global.web.environments }}
            - name:  {{ .name }}
              value: {{ .value | quote }}
          {{- end }}
          {{- with .Values.global.web.ports }}
          ports:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.resources.limits.web }}
          resources:
            limits:
              {{- toYaml . | nindent 14 }}
          {{- end }}
          volumeMounts:
            - name: "{{ .Release.Name }}-data"
              mountPath: /commafeed/data
      volumes:
        - name: "{{ .Release.Name }}-data"
          persistentVolumeClaim:
            claimName: "{{ .Release.Name }}-data-pvc"

{{ if eq .Values.global.postgres.internal.enabled true }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Release.Name }}-postgres"
  namespace: "{{ if eq .Release.Namespace "default" }}commafeed-k8s{{ else }}{{ .Release.Namespace }}{{ end }}"
spec:
  replicas: {{ .Values.replicaCount | default (printf "%d" 1) }}
  selector:
    matchLabels:
      app: "{{ .Release.Name }}-postgres"
  template:
    metadata:
      labels:
        app: "{{ .Release.Name }}-postgres"
    spec:
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{-  with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: "{{ .Release.Name }}-postgres"
          image: {{ template "commafeed.postgres.image" . }}
          env:
            - name: POSTGRES_DB
            {{- if .Values.global.postgres.secret.enabled }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-postgres
                  key: {{ .Values.global.postgres.secret.databaseKey | quote }}
            {{- else }}
              value: {{ .Values.global.postgres.options.database | quote }}
            {{- end }}
            - name: POSTGRES_USER
            {{- if .Values.global.postgres.secret.enabled }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-postgres
                  key: {{ .Values.global.postgres.secret.usernameKey | quote }}
            {{- else }}
              value: {{ .Values.global.postgres.options.username | quote }}
            {{- end }}
            - name: POSTGRES_PASSWORD
            {{- if .Values.global.postgres.secret.enabled }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-postgres
                  key: {{ .Values.global.postgres.secret.passwordKey | quote }}
            {{- else }}
              value: {{ .Values.global.postgres.options.password | quote }}
            {{- end }}
          {{- range .Values.global.postgres.environments }}
            - name: {{ .name }}
              value: {{ .value | quote }}
          {{- end }}
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: "{{ .Release.Name }}-postgres-data"
              mountPath: /var/lib/postgresql/data
      volumes:
        - name: "{{ .Release.Name }}-postgres-data"
          persistentVolumeClaim:
            claimName: "{{ .Release.Name }}-postgres-pvc"
{{- end }}