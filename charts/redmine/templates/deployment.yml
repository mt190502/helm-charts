---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Release.Name }}-web"
  namespace: "{{ if eq .Release.Namespace "default" }}redmine-k8s{{ else }}{{ .Release.Namespace }}{{ end }}"
spec:
  replicas: {{ .Values.replicaCount | default (printf "%d" 1) }}
  selector:
    matchLabels:
      app: "{{ .Release.Name }}-web"
  template:
    metadata:
      labels:
        app: "{{ .Release.Name }}-web"
    spec:
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
        - name: "{{ .Release.Name }}-web-init"
          image: busybox
          command:
            - sh
            - -c
            - |
            {{- if and (eq .Values.global.postgres.internal.enabled true) (eq .Values.global.postgres.selected true) }}
              until nc -z -v -w30 {{ .Release.Name }}-postgres 5432
            {{- else if and (eq .Values.global.postgres.external.enabled true) (eq .Values.global.postgres.selected true) }}
              until nc -z -v -w30 {{ .Values.global.postgres.external.host }} {{ .Values.global.postgres.external.port }}
            {{- else if and (eq .Values.global.mysql.internal.enabled true) (eq .Values.global.mysql.selected true) }}
              until nc -z -v -w30 {{ .Release.Name }}-mysql 3306
            {{- else if and (eq .Values.global.mysql.external.enabled true) (eq .Values.global.mysql.selected true) }}
              until nc -z -v -w30 {{ .Values.global.mysql.external.host }} {{ .Values.global.mysql.external.port }}
            {{- end }}
              do
                echo "Waiting for the database to be ready..."
                sleep 5
              done
      containers:
        - name: "{{ .Release.Name }}-web"
          image: {{ template "redmine.web.image" . }}
          env:
            - name: REDMINE_DB_USERNAME
              valueFrom:
                secretKeyRef:
                  {{- if eq .Values.global.postgres.selected true }}
                  name: {{ if .Values.global.postgres.secret.name }}{{ .Values.global.postgres.secret.name }}{{ else }}{{ .Release.Name }}-postgres{{ end }}
                  key: {{ .Values.global.postgres.secret.usernameKey | quote }}
                  {{- else if eq .Values.global.mysql.selected true }}
                  name: {{ if .Values.global.mysql.secret.name }}{{ .Values.global.mysql.secret.name }}{{ else }}{{ .Release.Name }}-mysql{{ end }}
                  key: {{ .Values.global.mysql.secret.usernameKey | quote }}
                  {{- end }}
            - name: REDMINE_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  {{- if eq .Values.global.postgres.selected true }}
                  name: {{ if .Values.global.postgres.secret.name }}{{ .Values.global.postgres.secret.name }}{{ else }}{{ .Release.Name }}-postgres{{ end }}
                  key: {{ .Values.global.postgres.secret.passwordKey | quote }}
                  {{- else if eq .Values.global.mysql.selected true }}
                  name: {{ if .Values.global.mysql.secret.name }}{{ .Values.global.mysql.secret.name }}{{ else }}{{ .Release.Name }}-mysql{{ end }}
                  key: {{ .Values.global.mysql.secret.passwordKey | quote }}
                  {{- end }}
            - name: REDMINE_DB_DATABASE
              valueFrom:
                secretKeyRef:
                  {{- if eq .Values.global.postgres.selected true }}
                  name: {{ if .Values.global.postgres.secret.name }}{{ .Values.global.postgres.secret.name }}{{ else }}{{ .Release.Name }}-postgres{{ end }}
                  key: {{ .Values.global.postgres.secret.databaseKey | quote }}
                  {{- else if eq .Values.global.mysql.selected true }}
                  name: {{ if .Values.global.mysql.secret.name }}{{ .Values.global.mysql.secret.name }}{{ else }}{{ .Release.Name }}-mysql{{ end }}
                  key: {{ .Values.global.mysql.secret.databaseKey | quote }}
                  {{- end }}
              {{- if and (eq .Values.global.postgres.internal.enabled true) (eq .Values.global.postgres.selected true) }}
            - name: REDMINE_DB_POSTGRES
              value: {{ .Release.Name }}-postgres
              {{- else if and (eq .Values.global.postgres.external.enabled true) (eq .Values.global.postgres.selected true) }}
            - name: REDMINE_DB_POSTGRES
              value: {{ .Values.global.postgres.external.host }}:{{ .Values.global.postgres.external.port }}
              {{- else if and (eq .Values.global.mysql.internal.enabled true) (eq .Values.global.mysql.selected true) }}
            - name: REDMINE_DB_MYSQL
              value: {{ .Release.Name }}-mysql
              {{- else if and (eq .Values.global.mysql.external.enabled true) (eq .Values.global.mysql.selected true) }}
            - name: REDMINE_DB_MYSQL
              value: {{ .Values.global.mysql.external.host }}:{{ .Values.global.mysql.external.port }}
              {{- end }}
          {{- range .Values.global.web.environments }}
            - name: {{ .name }}
              value: {{ .value | quote }}
          {{- end }}
          {{- with .Values.global.web.ports }}
          ports:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.resources.limits.web }}
          resources:
            limits:
              {{- toYaml . | nindent 14 }}
          {{- end }}
          volumeMounts:
            - name: "{{ .Release.Name }}-data"
              mountPath: /usr/src/redmine/themes
              subPath: themes
      volumes:
        - name: "{{ .Release.Name }}-data"
          persistentVolumeClaim:
            claimName: "{{ .Release.Name }}-data-pvc"

{{ if and .Values.global.postgres.internal.enabled .Values.global.postgres.selected }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "{{ .Release.Name }}-postgres"
  namespace: "{{ if eq .Release.Namespace "default" }}redmine-k8s{{ else }}{{ .Release.Namespace }}{{ end }}"
spec:
  replicas: {{ .Values.replicaCount | default (printf "%d" 1) }}
  podManagementPolicy: {{ .Values.global.postgres.settings.podManagementPolicy | default "Parallel" | quote }}
  serviceName: "{{ .Release.Name }}-postgres"
  {{- if .Values.global.postgres.settings.updateStrategy }}
  updateStrategy:
    type: {{ .Values.global.postgres.settings.updateStrategy.type | default "RollingUpdate" | quote }}
  {{- end }}
  selector:
    matchLabels:
      app: "{{ .Release.Name }}-postgres"
  template:
    metadata:
      labels:
        app: "{{ .Release.Name }}-postgres"
    spec:
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
        - name: "{{ .Release.Name }}-postgres-init"
          image: busybox
          command:
            - sh
            - -c
            - |
              [ -d "/mnt/lost+found" ] && rm -rf /mnt/lost+found
              exit 0
          volumeMounts:
            - name: "database"
              mountPath: /mnt
      containers:
        - name: "{{ .Release.Name }}-postgres"
          image: {{ template "redmine.postgres.image" . }}
          env:
            - name: POSTGRES_DB
            {{- if .Values.global.postgres.secret.enabled }}
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.global.postgres.secret.name }}{{ .Values.global.postgres.secret.name }}{{ else }}{{ .Release.Name }}-postgres{{ end }}
                  key: {{ .Values.global.postgres.secret.databaseKey | quote }}
            {{- else }}
              value: {{ .Values.global.postgres.options.database | quote }}
            {{- end }}
            - name: POSTGRES_USER
            {{- if .Values.global.postgres.secret.enabled }}
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.global.postgres.secret.name }}{{ .Values.global.postgres.secret.name }}{{ else }}{{ .Release.Name }}-postgres{{ end }}
                  key: {{ .Values.global.postgres.secret.usernameKey | quote }}
            {{- else }}
              value: {{ .Values.global.postgres.options.username | quote }}
            {{- end }}
            - name: POSTGRES_PASSWORD
            {{- if .Values.global.postgres.secret.enabled }}
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.global.postgres.secret.name }}{{ .Values.global.postgres.secret.name }}{{ else }}{{ .Release.Name }}-postgres{{ end }}
                  key: {{ .Values.global.postgres.secret.passwordKey | quote }}
            {{- else }}
              value: {{ .Values.global.postgres.options.password | quote }}
            {{- end }}
            {{- range .Values.global.postgres.environments }}
            - name: {{ .name }}
              value: {{ .value | quote }}
            {{- end }}
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: "database"
              mountPath: /var/lib/postgresql/data
      volumes:
        - name: "database"
  {{- if .Values.global.postgres.settings.persistence.claimRetentionPolicy }}
  persistentVolumeClaimRetentionPolicy:
    whenDeleted: {{ .Values.global.postgres.settings.persistence.claimRetentionPolicy.whenDeleted | default "Retain" | quote }}
    whenScaled: {{ .Values.global.postgres.settings.persistence.claimRetentionPolicy.whenScaled | default "Retain" | quote }}
  {{- end }}
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: "database"
        namespace: "{{ if eq .Release.Namespace "default" }}redmine-k8s{{ else }}{{ .Release.Namespace }}{{ end }}"
      spec:
        accessModes:
        {{- if .Values.global.postgres.settings.persistence.accessModes }}
        {{- toYaml .Values.global.postgres.settings.persistence.accessModes | nindent 8 }} 
        {{- else }}
          - ReadWriteOnce
        {{- end }}
        resources:
          requests:
            storage: "{{ .Values.resources.requests.postgres.storage }}"
{{- end }}

{{ if and .Values.global.mysql.internal.enabled .Values.global.mysql.selected}}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "{{ .Release.Name }}-mysql"
  namespace: "{{ if eq .Release.Namespace "default" }}redmine-k8s{{ else }}{{ .Release.Namespace }}{{ end }}"
spec:
  replicas: {{ .Values.replicaCount | default (printf "%d" 1) }}
  podManagementPolicy: {{ .Values.global.mysql.settings.podManagementPolicy | default "Parallel" | quote }}
  serviceName: "{{ .Release.Name }}-mysql"
  {{- if .Values.global.mysql.settings.updateStrategy }}
  updateStrategy:
    type: {{ .Values.global.mysql.settings.updateStrategy.type | default "RollingUpdate" | quote }}
  {{- end }}
  selector:
    matchLabels:
      app: "{{ .Release.Name }}-mysql"
  template:
    metadata:
      labels:
        app: "{{ .Release.Name }}-mysql"
    spec:
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
        - name: "{{ .Release.Name }}-mysql-init"
          image: busybox
          command:
            - sh
            - -c
            - |
              [ -d "/mnt/lost+found" ] && rm -rf /mnt/lost+found
              exit 0
          volumeMounts:
            - name: "database"
              mountPath: /mnt
      containers:
        - name: "{{ .Release.Name }}-mysql"
          image: {{ template "redmine.mysql.image" . }}
          env:
            - name: {{ if eq .Values.image.mysql.repository "mariadb"}}MARIADB{{ else }}MYSQL{{ end }}_DATABASE
            {{- if .Values.global.mysql.secret.enabled }}
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.global.mysql.secret.name }}{{ .Values.global.mysql.secret.name }}{{ else }}{{ .Release.Name }}-mysql{{ end }}
                  key: {{ .Values.global.mysql.secret.databaseKey | quote }}
            {{- else }}
              value: {{ .Values.global.mysql.options.database | quote }}
            {{- end }}
            - name: {{ if eq .Values.image.mysql.repository "mariadb"}}MARIADB{{ else }}MYSQL{{ end }}_USER
            {{- if .Values.global.mysql.secret.enabled }}
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.global.mysql.secret.name }}{{ .Values.global.mysql.secret.name }}{{ else }}{{ .Release.Name }}-mysql{{ end }}
                  key: {{ .Values.global.mysql.secret.usernameKey | quote }}
            {{- else }}
              value: {{ .Values.global.mysql.options.username | quote }}
            {{- end }}
            - name: {{ if eq .Values.image.mysql.repository "mariadb"}}MARIADB{{ else }}MYSQL{{ end }}_PASSWORD
            {{- if .Values.global.mysql.secret.enabled }}
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.global.mysql.secret.name }}{{ .Values.global.mysql.secret.name }}{{ else }}{{ .Release.Name }}-mysql{{ end }}
                  key: {{ .Values.global.mysql.secret.passwordKey | quote }}
            {{- else }}
              value: {{ .Values.global.mysql.options.password | quote }}
            {{- end }}
            - name: {{ if eq .Values.image.mysql.repository "mariadb"}}MARIADB{{ else }}MYSQL{{ end }}_ROOT_PASSWORD
            {{- if .Values.global.mysql.secret.enabled }}
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.global.mysql.secret.name }}{{ .Values.global.mysql.secret.name }}{{ else }}{{ .Release.Name }}-mysql{{ end }}
                  key: {{ .Values.global.mysql.secret.rootPasswordKey | quote }}
            {{- else }}
              value: {{ .Values.global.mysql.options.rootPasswordKey | quote }}
            {{- end }}
            {{- range .Values.global.mysql.environments }}
            - name: {{ .name }}
              value: {{ .value | quote }}
            {{- end }}
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: "database"
              mountPath: /var/lib/mysql
      volumes:
        - name: "database"
  {{- if .Values.global.mysql.settings.persistence.claimRetentionPolicy }}
  persistentVolumeClaimRetentionPolicy:
    whenDeleted: {{ .Values.global.mysql.settings.persistence.claimRetentionPolicy.whenDeleted | default "Retain" | quote }}
    whenScaled: {{ .Values.global.mysql.settings.persistence.claimRetentionPolicy.whenScaled | default "Retain" | quote }}
  {{- end }}
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: "database"
        namespace: "{{ if eq .Release.Namespace "default" }}redmine-k8s{{ else }}{{ .Release.Namespace }}{{ end }}"
      spec:
        accessModes:
        {{- if .Values.global.mysql.settings.persistence.accessModes }}
        {{- toYaml .Values.global.mysql.settings.persistence.accessModes | nindent 8 }} 
        {{- else }}
          - ReadWriteOnce
        {{- end }}
        resources:
          requests:
            storage: "{{ .Values.resources.requests.mysql.storage }}"
{{- end }}